#### 方法一：枚举范围内的字符串

**思路与算法**

我们在 $[\textit{left}, \textit{right}]$ 范围内枚举给定字符串数组 $\textit{words}$ 中的字符串，并判断其是否以元音字母开头，并且以元音字母结尾。

为了方便判断，我们可以将元音字母 $\text{aeiou}$ 存入一个哈希集合中。这样一来，我们只需要判断字符串的首字符和尾字符是否均在哈希集合中出现即可。

**代码**

* [sol1-C++]

```C++
class Solution {
public:
    int vowelStrings(vector<string>& words, int left, int right) {
        unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u'};
        int ans = 0;
        for (int i = left; i <= right; ++i) {
            const string& word = words[i];
            if (vowels.count(word[0]) && vowels.count(word.back())) {
                ++ans;
            }
        }
        return ans;
    }
};
```

* [sol1-Java]

```Java
class Solution {
    public int vowelStrings(String[] words, int left, int right) {
        Set<Character> vowels = new HashSet<Character>() {{
            add('a');
            add('e');
            add('i');
            add('o');
            add('u');
        }};
        int ans = 0;
        for (int i = left; i <= right; ++i) {
            String word = words[i];
            if (vowels.contains(word.charAt(0)) && vowels.contains(word.charAt(word.length() - 1))) {
                ++ans;
            }
        }
        return ans;
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    public int VowelStrings(string[] words, int left, int right) {
        ISet<char> vowels = new HashSet<char>() { 'a', 'e', 'i', 'o', 'u' };
        int ans = 0;
        for (int i = left; i <= right; ++i) {
            string word = words[i];
            if (vowels.Contains(word[0]) && vowels.Contains(word[word.Length - 1])) {
                ++ans;
            }
        }
        return ans;
    }
}
```

* [sol1-Python3]

```Python
class Solution:
    def vowelStrings(self, words: List[str], left: int, right: int) -> int:
        vowels = set("aeiou")
        ans = 0
        for i in range(left, right + 1):
            word = words[i]
            if word[0] in vowels and word[-1] in vowels:
                ans += 1
        return ans
```

* [sol1-C]

```C
typedef struct {
    int key;
    UT_hash_handle hh;
} HashItem; 

HashItem *hashFindItem(HashItem **obj, int key) {
    HashItem *pEntry = NULL;
    HASH_FIND_INT(*obj, &key, pEntry);
    return pEntry;
}

bool hashAddItem(HashItem **obj, int key) {
    if (hashFindItem(obj, key)) {
        return false;
    }
    HashItem *pEntry = (HashItem *)malloc(sizeof(HashItem));
    pEntry->key = key;
    HASH_ADD_INT(*obj, key, pEntry);
    return true;
}

void hashFree(HashItem **obj) {
    HashItem *curr = NULL, *tmp = NULL;
    HASH_ITER(hh, *obj, curr, tmp) {
        HASH_DEL(*obj, curr);  
        free(curr);
    }
}

int vowelStrings(char ** words, int wordsSize, int left, int right) {
    HashItem *vowels = NULL;
    char arr[] = {'a', 'e', 'i', 'o', 'u'};
    for (int i = 0; i < 5; i++) {
        hashAddItem(&vowels, arr[i]);
    }
    int ans = 0;
    for (int i = left; i <= right; ++i) {
        char *word = words[i];
        int len = strlen(word);
        if (hashFindItem(&vowels, word[0]) && hashFindItem(&vowels, word[len - 1])) {
            ans++;
        }
    }
    hashFree(&vowels);
    return ans;
}
```

* [sol1-Go]

```Go
func vowelStrings(words []string, left int, right int) int {
    vowels := map[byte]struct{}{'a' : {}, 'e' : {}, 'i' : {}, 'o' : {}, 'u' : {}}
    ans := 0
    for _, word := range(words[left : right + 1]) {
        if _, ok1 := vowels[word[0]]; ok1 {
            if _, ok2 := vowels[word[len(word) - 1]]; ok2 {
                ans++
            }
        }
    }
    return ans
}
```

* [sol1-JavaScript]

```JavaScript
var vowelStrings = function(words, left, right) {
    vowels = new Set(['a', 'e', 'i', 'o', 'u']);
    let ans = 0;
    for (let i = left; i <= right; ++i) {
        const word = words[i];
        if (vowels.has(word[0]) && vowels.has(word[word.length - 1])) {
            ans++;
        }
    }
    return ans;
};
```

**复杂度分析**

- 时间复杂度：$O(n + |\Sigma|)$，其中 $n$ 是数组 $\textit{words}$ 的长度，$\Sigma$ 是元音的集合，在本题中 $|\Sigma| = 5$。

- 空间复杂度：$O(|\Sigma|)$，即为哈希集合需要使用的空间。

