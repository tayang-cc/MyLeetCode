#### 方法一：枚举

枚举 $[1, n]$ 范围内的所有整数，记当前枚举的数为 $i$，如果 $i \bmod 3 = 0$ 或 $i \bmod 5 = 0$ 或 $i \bmod 7 = 0$，那么将 $i$ 加到总和 $\textit{res}$。

* [sol1-C++]

```C++
class Solution {
public:
    int sumOfMultiples(int n) {
        int res = 0;
        for (int i = 1; i <= n; i++) {
            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {
                res += i;
            }
        }
        return res;
    }
};
```

* [sol1-Java]

```Java
class Solution {
    public int sumOfMultiples(int n) {
        int res = 0;
        for (int i = 1; i <= n; i++) {
            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {
                res += i;
            }
        }
        return res;
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    public int SumOfMultiples(int n) {
        int res = 0;
        for (int i = 1; i <= n; i++) {
            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {
                res += i;
            }
        }
        return res;
    }
}
```

* [sol1-Go]

```Go
func sumOfMultiples(n int) int {
    res := 0
    for i := 1; i <= n; i++ {
        if i % 3 == 0 || i % 5 == 0 || i % 7 == 0 {
            res += i
        }
    }
    return res
}
```

* [sol1-Python]

```Python
class Solution:
    def sumOfMultiples(self, n: int) -> int:
        return sum(i for i in range(1, n + 1) if i % 3 == 0 or i % 5 == 0 or i % 7 == 0)
```

* [sol1-C]

```C
int sumOfMultiples(int n){
    int res = 0;
    for (int i = 1; i <= n; i++) {
        if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {
            res += i;
        }
    }
    return res;
}
```

* [sol1-JavaScript]

```JavaScript
var sumOfMultiples = function(n) {
    let res = 0;
    for (let i = 1; i <= n; i++) {
        if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0) {
            res += i;
        }
    }
    return res;
};
```

**复杂度分析**

+ 时间复杂度：$O(n)$。

+ 空间复杂度：$O(1)$。

#### 方法二：容斥原理

考虑在区间 $[1, n]$ 内能被数 $m$ 整除的整数，从小到大排序后成为一个等差数列，和为：

$$
f(n, m) = \frac{(m + m \times \lfloor \frac{n}{m} \rfloor) \times \lfloor \frac{n}{m} \rfloor}{2}
$$

根据 [容斥原理](https://oi-wiki.org/math/combinatorics/inclusion-exclusion-principle/)，在区间 $[1, n]$ 内，能被 $3$ 、$5$ 和 $7$ 整除的整数之和为：

$$
f(n, 3) + f(n, 5) + f(n, 7) - f(n, 3 \times 5) - f(n, 3 \times 7) - f(n, 5 \times 7) + f(n, 3 \times 5 \times 7)
$$

* [sol2-C++]

```C++
class Solution {
public:
    int f(int n, int m) {
        return (m + n / m * m) * (n / m) / 2;
    }

    int sumOfMultiples(int n) {
        return f(n, 3) + f(n, 5) + f(n, 7) - f(n, 3 * 5) - f(n, 3 * 7) - f(n, 5 * 7) + f(n, 3 * 5 * 7);
    }
};
```

* [sol2-Java]

```Java
class Solution {
    public int f(int n, int m) {
        return (m + n / m * m) * (n / m) / 2;
    }

    public int sumOfMultiples(int n) {
        return f(n, 3) + f(n, 5) + f(n, 7) - f(n, 3 * 5) - f(n, 3 * 7) - f(n, 5 * 7) + f(n, 3 * 5 * 7);
    }
}
```

* [sol2-C#]

```C#
public class Solution {
    public int f(int n, int m) {
        return (m + n / m * m) * (n / m) / 2;
    }
    public int SumOfMultiples(int n) {
        return f(n, 3) + f(n, 5) + f(n, 7) - f(n, 3 * 5) - f(n, 3 * 7) - f(n, 5 * 7) + f(n, 3 * 5 * 7);
    }
}
```

* [sol2-Go]

```Go
func f(n, m int) int {
    return (m + n / m * m) * (n / m) / 2
}

func sumOfMultiples(n int) int {
    return f(n, 3) + f(n, 5) + f(n, 7) - f(n, 3 * 5) - f(n, 3 * 7) - f(n, 5 * 7) + f(n, 3 * 5 * 7)
}
```

* [sol2-Python]

```Python
class Solution:
    def sumOfMultiples(self, n: int) -> int:
        def f(m: int) -> int:
            return (m + n // m * m) * (n // m) // 2
        return f(3) + f(5) + f(7) - f(3 * 5) - f(3 * 7) - f(5 * 7) + f(3 * 5 * 7)
```

* [sol2-C]

```C
int f(int n, int m) {
    return (m + n / m * m) * (n / m) / 2;
}

int sumOfMultiples(int n) {
    return f(n, 3) + f(n, 5) + f(n, 7) - f(n, 3 * 5) - f(n, 3 * 7) - f(n, 5 * 7) + f(n, 3 * 5 * 7);
}
```

* [sol2-JavaScript]

```JavaScript
var f = function(n, m) {
    return (m + Math.floor(n / m) * m) * Math.floor(n / m) / 2;
}
var sumOfMultiples = function(n) {
    return f(n, 3) + f(n, 5) + f(n, 7) - f(n, 3 * 5) - f(n, 3 * 7) - f(n, 5 * 7) + f(n, 3 * 5 * 7);
};
```

**复杂度分析**

+ 时间复杂度：$O(1)$。

+ 空间复杂度：$O(1)$。

