#### 方法一：分类讨论 + 拓扑排序

**提示 $1$**

如果我们把每个员工看成图上的一个节点，如果员工 $x$ 喜欢员工 $y$，就在从 $x$ 对应的节点到 $y$ 对应的节点连一条边，那么形成的图是什么结构的？

**提示 $1$ 解释**

形成的图会由若干颗「基环内向树」组成。所谓「基环内向树」，就是形如下图所示的结构：

![fig1](https://assets.leetcode-cn.com/solution-static/5970/5970_1.png)

原因如下：

- 我们从任意一个节点 $x$ 开始在图上进行「游走」，由于每个员工只有一位喜欢的员工，因此每个节点在图上只会有一条出边，即「游走」的过程是**唯一**的。由于图上有 $n$ 个节点，因此在 $n+1$ 步以内，一定会走到一个重复的节点，那么在第一次经过该节点之后，到第二次经过该节点之前的所有节点，以及该节点本身，就组成了一个环，如上图的蓝色节点所示。

- 对于不在环上的节点，我们已经说明了从它们开始「游走」也一定会进入到环中。在到达环上的节点之前，它们不会重复经过节点（否则就有两个环了，我们可以证明一个连通分量中是不可能有两个环的：因为每个节点只有一条出边，因此如果有两个环并且它们连通，那么必然某个环上有一个点有两条出边，一条出边指向同一个环上的节点，另一条出边可以使得它到达另一个环，这就产生了矛盾），那么它们就形成了类似树的结构，如上图的绿色节点所示。

需要注意的是，一个单独的环也是「基环内向树」，它是一种特殊情况，即没有绿色的节点。

**思路与算法**

既然我们知道了图由若干颗「基环内向树」组成，那么我们就可以想一想，每一颗「基环内向树」的哪一部分可以被安排参加会议。

我们首先讨论特殊的情况，即一个单独的环（或若干个环），并且所有环的大小都 $\geq 3$。可以发现，我们按照环上的顺序给对应的员工安排座位是满足要求的，因为对于每一个环上的员工，它喜欢的员工就在它的旁边。并且，我们必须安排环上的所有员工，因为如果有缺失，那么喜欢那位缺失了的员工的员工就无法满足要求了。

但如果我们已经安排了某一个环上的所有员工，剩余的环就没有办法安排了。这是因为已经安排的那个环是没有办法被「断开」的：断开的本质就是相邻位置员工的缺失。因此，我们可以得出一个重要的结论：

> 如果我们想安排大小 $\geq 3$ 的环，我们最多只能安排一个，并且环需要是完整的。

那么如果是环大小 $\geq 3$ 的「基环内向树」呢？如果我们安排了不在环上的节点，那么从该节点开始，我们需要不断安排当前节点喜欢的员工，这实际上就是「游走」的过程。而当我们游走到环上并到达环上最后一个未经过的节点时，该节点的下一个节点（即喜欢的员工）已经被安排过，所以最后一个未经过的节点就无法被安排，不满足要求。因此，我们不能安排任何不在环上的节点，只能安排在环上的节点，就得出了另一个的结论：

> 所有环大小 $\geq 3$ 的「基环内向树」与一个大小相同（指环的部分）的环是等价的。

那么最后我们只需要考虑大小 $=2$ 的环或者「基环内向树」了。这里的特殊之处在于，大小 $=2$ 的环可以安排多个：因为环上的两个点是**互相喜欢**的，因此只需要它们相邻即可，而没有其它的要求。而对于环大小 $=2$ 的「基环内向树」，如果我们安排了不在环上的节点，那么游走完环上两个节点之后，同样是满足要求的，并且我们甚至可以继续延伸（反向「游走」），到另一个不在环上的节点为止。如下图所示，包含 $\texttt{X}$ 的节点就是可以安排参加会议的节点。

![fig1](https://assets.leetcode-cn.com/solution-static/5970/5970_2.png)

并且同样地，对于每一棵环大小 $=2$ 的「基环内向树」，我们都可以取出这样一条「双向游走」路径进行安排，它们之间不会影响。综上所述，原问题的答案即为下面二者中的最大值：

- 最大的环的大小；

- 所有环大小 $=2$ 的「基环内向树」上的最长的「双向游走」路径之和。

为了求解「基环内向树」上的最长的「双向游走」路径，我们可以使用拓扑排序 + 动态规划的方法。记 $f[i]$ 表示到节点 $i$ 为止的最长「游走」路径经过的节点个数，那么状态方程即为：

$$
f[i] = \max_{j \to i}\{ f[j] \} + 1
$$

即我们考虑节点 $i$ 的上一个节点 $j$，在图中必须有从 $j$ 到 $i$ 的一条有向边，这样我们就可以从 $j$ 转移到 $i$。如果不存在满足要求的 $j$（例如「基环内向树」退化成一个大小 $=2$ 的环），那么 $f[i] = 1$。状态转移可以和拓扑排序同时进行。

在拓扑排序完成后，剩余没有被弹出过队列的节点就是环上的节点。我们可以找出每一个环。如果环的大小 $\geq 3$，我们就用其来更新最大的环的大小；如果环的大小 $=2$，设环上的两个节点为 $x$ 和 $y$，那么该「基环内向树」上最长的「双向游走」的路径长度就是 $f[x] + f[y]$。

**代码**

* [sol1-C++]

```C++
class Solution {
public:
    int maximumInvitations(vector<int>& favorite) {
        int n = favorite.size();
        // 统计入度，便于进行拓扑排序
        vector<int> indeg(n);
        for (int i = 0; i < n; ++i) {
            ++indeg[favorite[i]];
        }
        vector<int> used(n), f(n, 1);
        queue<int> q;
        for (int i = 0; i < n; ++i) {
            if (!indeg[i]) {
                q.push(i);
            }
        }
        while (!q.empty()) {
            int u = q.front();
            used[u] = true;
            q.pop();
            int v = favorite[u];
            // 状态转移
            f[v] = max(f[v], f[u] + 1);
            --indeg[v];
            if (!indeg[v]) {
                q.push(v);
            }
        }
        // ring 表示最大的环的大小
        // total 表示所有环大小为 2 的「基环内向树」上的最长的「双向游走」路径之和
        int ring = 0, total = 0;
        for (int i = 0; i < n; ++i) {
            if (!used[i]) {
                int j = favorite[i];
                // favorite[favorite[i]] = i 说明环的大小为 2
                if (favorite[j] == i) {
                    total += f[i] + f[j];
                    used[i] = used[j] = true;
                }
                // 否则环的大小至少为 3，我们需要找出环
                else {
                    int u = i, cnt = 0;
                    while (true) {
                        ++cnt;
                        u = favorite[u];
                        used[u] = true;
                        if (u == i) {
                            break;
                        }
                    }
                    ring = max(ring, cnt);
                }
            }
        }
        return max(ring, total);
    }
};
```

* [sol1-Java]

```Java
class Solution {
    public int maximumInvitations(int[] favorite) {
        int n = favorite.length;
        // 统计入度，便于进行拓扑排序
        int[] indeg = new int[n];
        for (int i = 0; i < n; ++i) {
            ++indeg[favorite[i]];
        }
        boolean[] used = new boolean[n];
        int[] f = new int[n];
        Arrays.fill(f, 1);
        Queue<Integer> queue = new ArrayDeque<Integer>();
        for (int i = 0; i < n; ++i) {
            if (indeg[i] == 0) {
                queue.offer(i);
            }
        }
        while (!queue.isEmpty()) {
            int u = queue.poll();
            used[u] = true;
            int v = favorite[u];
            // 状态转移
            f[v] = Math.max(f[v], f[u] + 1);
            --indeg[v];
            if (indeg[v] == 0) {
                queue.offer(v);
            }
        }
        // ring 表示最大的环的大小
        // total 表示所有环大小为 2 的「基环内向树」上的最长的「双向游走」路径之和
        int ring = 0, total = 0;
        for (int i = 0; i < n; ++i) {
            if (!used[i]) {
                int j = favorite[i];
                // favorite[favorite[i]] = i 说明环的大小为 2
                if (favorite[j] == i) {
                    total += f[i] + f[j];
                    used[i] = used[j] = true;
                }
                // 否则环的大小至少为 3，我们需要找出环
                else {
                    int u = i, cnt = 0;
                    while (true) {
                        ++cnt;
                        u = favorite[u];
                        used[u] = true;
                        if (u == i) {
                            break;
                        }
                    }
                    ring = Math.max(ring, cnt);
                }
            }
        }
        return Math.max(ring, total);
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    public int MaximumInvitations(int[] favorite) {
        int n = favorite.Length;
        // 统计入度，便于进行拓扑排序
        int[] indeg = new int[n];
        for (int i = 0; i < n; ++i) {
            ++indeg[favorite[i]];
        }
        bool[] used = new bool[n];
        int[] f = new int[n];
        Array.Fill(f, 1);
        Queue<int> queue = new Queue<int>();
        for (int i = 0; i < n; ++i) {
            if (indeg[i] == 0) {
                queue.Enqueue(i);
            }
        }
        while (queue.Count > 0) {
            int u = queue.Dequeue();
            used[u] = true;
            int v = favorite[u];
            // 状态转移
            f[v] = Math.Max(f[v], f[u] + 1);
            --indeg[v];
            if (indeg[v] == 0) {
                queue.Enqueue(v);
            }
        }
        // ring 表示最大的环的大小
        // total 表示所有环大小为 2 的「基环内向树」上的最长的「双向游走」路径之和
        int ring = 0, total = 0;
        for (int i = 0; i < n; ++i) {
            if (!used[i]) {
                int j = favorite[i];
                // favorite[favorite[i]] = i 说明环的大小为 2
                if (favorite[j] == i) {
                    total += f[i] + f[j];
                    used[i] = used[j] = true;
                }
                // 否则环的大小至少为 3，我们需要找出环
                else {
                    int u = i, cnt = 0;
                    while (true) {
                        ++cnt;
                        u = favorite[u];
                        used[u] = true;
                        if (u == i) {
                            break;
                        }
                    }
                    ring = Math.Max(ring, cnt);
                }
            }
        }
        return Math.Max(ring, total);
    }
}
```

* [sol1-Python3]

```Python
class Solution:
    def maximumInvitations(self, favorite: List[int]) -> int:
        n = len(favorite)
        # 统计入度，便于进行拓扑排序
        indeg = [0] * n
        for i in range(n):
            indeg[favorite[i]] += 1
        
        used = [False] * n
        f = [1] * n
        q = deque(i for i in range(n) if indeg[i] == 0)
        
        while q:
            u = q.popleft()
            used[u] = True
            v = favorite[u]
            # 状态转移
            f[v] = max(f[v], f[u] + 1)
            indeg[v] -= 1
            if indeg[v] == 0:
                q.append(v)
        
        # ring 表示最大的环的大小
        # total 表示所有环大小为 2 的「基环内向树」上的最长的「双向游走」路径之和
        ring = total = 0
        for i in range(n):
            if not used[i]:
                j = favorite[i]
                # favorite[favorite[i]] = i 说明环的大小为 2
                if favorite[j] == i:
                    total += f[i] + f[j]
                    used[i] = used[j] = True
                # 否则环的大小至少为 3，我们需要找出环
                else:
                    u = i
                    cnt = 0
                    while True:
                        cnt += 1
                        u = favorite[u]
                        used[u] = True
                        if u == i:
                            break
                    ring = max(ring, cnt)
        
        return max(ring, total)
```

* [sol1-C]

```C
int maximumInvitations(int* favorite, int favoriteSize) {
    int n = favoriteSize;
    // 统计入度，便于进行拓扑排序
    int indeg[n];
    memset(indeg, 0, sizeof(indeg));
    for (int i = 0; i < n; ++i) {
        ++indeg[favorite[i]];
    }

    int used[n], f[n];
    memset(used, 0, sizeof(used));
    for (int i = 0; i < n; i++) {
        f[i] = 1;
    }
    
    int q[n];
    int head = 0, tail = 0;
    for (int i = 0; i < n; ++i) {
        if (!indeg[i]) {
            q[tail++] = i;
        }
    }
    while (head != tail) {
        int u = q[head++];
        used[u] = true;
        int v = favorite[u];
        // 状态转移
        f[v] = fmax(f[v], f[u] + 1);
        --indeg[v];
        if (!indeg[v]) {
            q[tail++] = v;
        }
    }
    // ring 表示最大的环的大小
    // total 表示所有环大小为 2 的「基环内向树」上的最长的「双向游走」路径之和
    int ring = 0, total = 0;
    for (int i = 0; i < n; ++i) {
        if (!used[i]) {
            int j = favorite[i];
            // favorite[favorite[i]] = i 说明环的大小为 2
            if (favorite[j] == i) {
                total += f[i] + f[j];
                used[i] = used[j] = true;
            }
            // 否则环的大小至少为 3，我们需要找出环
            else {
                int u = i, cnt = 0;
                while (true) {
                    ++cnt;
                    u = favorite[u];
                    used[u] = true;
                    if (u == i) {
                        break;
                    }
                }
                ring = fmax(ring, cnt);
            }
        }
    }
    return fmax(ring, total);
}
```

* [sol1-Go]

```Go
func maximumInvitations(favorite []int) int {
    n := len(favorite)
    // 统计入度，便于进行拓扑排序
    indeg := make([]int, n)
    for _, x := range favorite {
        indeg[x]++
    }

    used := make([] bool, n)
    f := make([] int, n)
    for i := 0; i < n; i++ {
        f[i] = 1
    }
    
    q := []int{}
    for i := 0; i < n; i++ {
        if indeg[i] == 0 {
            q = append(q, i)
        }
    }
    for len(q) > 0 {
        u := q[0]
        used[u] = true
        q = q[1:]
        v := favorite[u]
        // 状态转移
        f[v] = max(f[v], f[u] + 1);
        indeg[v]--
        if indeg[v] == 0 {
            q = append(q, v)
        }
    }
    // ring 表示最大的环的大小
    // total 表示所有环大小为 2 的「基环内向树」上的最长的「双向游走」路径之和
    ring, total := 0, 0
    for i := 0; i < n; i++ {
        if !used[i] {
            j := favorite[i];
            // favorite[favorite[i]] = i 说明环的大小为 2
            if favorite[j] == i {
                total += f[i] + f[j]
                used[i], used[j] = true, true
            } else {
                // 否则环的大小至少为 3，我们需要找出环
                u, cnt := i, 0
                for true {
                    cnt++
                    u = favorite[u]
                    used[u] = true
                    if u == i {
                        break
                    }
                }
                ring = max(ring, cnt)
            }
        }
    }
    return max(ring, total)
}

func max(x, y int) int {
    if x < y {
        return y
    }
    return x
}
```

* [sol1-JavaScript]

```JavaScript
var maximumInvitations = function(favorite) {
    const n = favorite.length;
    // 统计入度，便于进行拓扑排序
    const indeg = new Array(n).fill(0);
    for (x of favorite) {
        indeg[x]++;
    }

    const used = new Array(n).fill(false)
    const f = new Array(n).fill(1)
    const q = []
    for (let i = 0; i < n; i++) {
        if (!indeg[i]) {
            q.push(i);
        }
    }
    while (q.length) {
        let u = q.pop();
        used[u] = true;
        let v = favorite[u];
        // 状态转移
        f[v] = Math.max(f[v], f[u] + 1);
        indeg[v]--;
        if (!indeg[v]) {
            q.unshift(v);
        }
    }
    // ring 表示最大的环的大小
    // total 表示所有环大小为 2 的「基环内向树」上的最长的「双向游走」路径之和
    let ring = 0, total = 0;
    for (let i = 0; i < n; i++) {
        if (!used[i]) {
            let j = favorite[i];
            // favorite[favorite[i]] = i 说明环的大小为 2
            if (favorite[j] == i) {
                total += f[i] + f[j]
                used[i] = used[j] = true;
            } else {
                // 否则环的大小至少为 3，我们需要找出环
                let u = i, cnt = 0;
                while (true) {
                    cnt++;
                    u = favorite[u];
                    used[u] = true;
                    if (u == i) {
                        break;
                    }
                }
                ring = Math.max(ring, cnt);
            }
        }
    }
    return Math.max(ring, total);
};
```

**复杂度分析**

- 时间复杂度：$O(n)$。图中有 $n$ 个节点和 $n$ 条边，拓扑排序需要的时间为 $O(n)$，后续找出所有环的时间也为 $O(n)$。

- 空间复杂度：$O(n)$。我们需要若干个长度为 $n$ 的数组。

