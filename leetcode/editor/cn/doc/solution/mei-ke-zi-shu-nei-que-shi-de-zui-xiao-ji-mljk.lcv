#### 方法一：深度优先搜索 + 启发式合并

为了方便描述，我们把以节点 $\textit{node}$ 为根的子树包含的所有基因值集合记为 $\textit{geneSet}_\textit{node}$，节点 $\textit{node}$ 的所有子节点集合记为 $\textit{children}_\textit{node}$，以节点 $\textit{node}$ 为根的子树缺失的最小基因值为 $\textit{gene}_\textit{node}$。

对家族树进行深度优先搜索，假设当前搜索的节点为 $\textit{node}$，那么该节点的基因值集合等于所有子节点的基因值集合的并集（包含该节点的基因值），即：

$$
\textit{geneSet}_\textit{node} = \big \{ \textit{nums}[node]\big \} \bigcup \big (\mathop{\sum}\limits_{\textit{child} \in \textit{children}_\textit{node}}{\textit{geneSet}_\textit{child}} \big )
$$

为了优化时间复杂度，基于启发式合并的原理（参考 [OIWiki 树上启发式合并](https://oi-wiki.org/graph/dsu-on-tree/)），在合并子节点基因值集合时，需要将小集合合并到大集合。获取到节点 $\textit{node}$ 的基因值集合后，可以通过不断枚举来获取缺失的最小基因值，而对于当前节点 $\textit{node}$ 缺失的最小基因值，显然有：

$$
\textit{gene}_\textit{node} \ge \max\limits_{\textit{child} \in \textit{children}_\textit{node}}{\textit{gene}_\textit{child}}
$$

即枚举的初始值为所有子节点缺失的最小基因值的最大值。

* [sol1-C++]

```C++
class Solution {
public:
    vector<int> smallestMissingValueSubtree(vector<int>& parents, vector<int>& nums) {
        int n = parents.size();
        vector<vector<int>> children(n);
        for (int i = 1; i < n; i++) {
            children[parents[i]].push_back(i);
        }

        vector<int> res(n, 1);
        vector<unordered_set<int>> geneSet(n);
        function<int(int)> dfs = [&](int node) -> int {
            geneSet[node].insert(nums[node]);
            for (auto child : children[node]) {
                res[node] = max(res[node], dfs(child));
                if (geneSet[node].size() < geneSet[child].size()) {
                    geneSet[node].swap(geneSet[child]);
                }
                geneSet[node].merge(geneSet[child]);
            }
            while (geneSet[node].count(res[node]) > 0) {
                res[node]++;
            }
            return res[node];
        };
        dfs(0);
        return res;
    }
};
```

* [sol1-Java]

```Java
class Solution {
    public int[] smallestMissingValueSubtree(int[] parents, int[] nums) {
        int n = parents.length;
        List<Integer>[] children = new List[n];
        for (int i = 0; i < n; i++) {
            children[i] = new ArrayList<Integer>();
        }
        for (int i = 1; i < n; i++) {
            children[parents[i]].add(i);
        }

        int[] res = new int[n];
        Arrays.fill(res, 1);
        Set<Integer>[] geneSet = new Set[n];
        for (int i = 0; i < n; i++) {
            geneSet[i] = new HashSet<Integer>();
        }
        dfs(0, res, nums, children, geneSet);
        return res;
    }

    public int dfs(int node, int[] res, int[] nums, List<Integer>[] children, Set<Integer>[] geneSet) {
        geneSet[node].add(nums[node]);
        for (int child : children[node]) {
            res[node] = Math.max(res[node], dfs(child, res, nums, children, geneSet));
            if (geneSet[node].size() < geneSet[child].size()) {
                Set<Integer> temp = geneSet[node];
                geneSet[node] = geneSet[child];
                geneSet[child] = temp;
            }
            geneSet[node].addAll(geneSet[child]);
        }
        while (geneSet[node].contains(res[node])) {
            res[node]++;
        }
        return res[node];
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    public int[] SmallestMissingValueSubtree(int[] parents, int[] nums) {
        int n = parents.Length;
        IList<int>[] children = new IList<int>[n];
        for (int i = 0; i < n; i++) {
            children[i] = new List<int>();
        }
        for (int i = 1; i < n; i++) {
            children[parents[i]].Add(i);
        }

        int[] res = new int[n];
        Array.Fill(res, 1);
        ISet<int>[] geneSet = new ISet<int>[n];
        for (int i = 0; i < n; i++) {
            geneSet[i] = new HashSet<int>();
        }
        DFS(0, res, nums, children, geneSet);
        return res;
    }

    public int DFS(int node, int[] res, int[] nums, IList<int>[] children, ISet<int>[] geneSet) {
        geneSet[node].Add(nums[node]);
        foreach (int child in children[node]) {
            res[node] = Math.Max(res[node], DFS(child, res, nums, children, geneSet));
            if (geneSet[node].Count < geneSet[child].Count) {
                ISet<int> temp = geneSet[node];
                geneSet[node] = geneSet[child];
                geneSet[child] = temp;
            }
            foreach (int val in geneSet[child]) {
                geneSet[node].Add(val);
            }
        }
        while (geneSet[node].Contains(res[node])) {
            res[node]++;
        }
        return res[node];
    }
}
```

* [sol1-Go]

```Go
func max(a, b int) int {
    if a > b {
        return a
    }
    return b
}

func smallestMissingValueSubtree(parents []int, nums []int) []int {
    n := len(parents)
    children := make([][]int, n)
    for i := 1; i < n; i++ {
        children[parents[i]] = append(children[parents[i]], i)
    }

    res := make([]int, n)
    for i := 0; i < n; i++ {
        res[i] = 1
    }
    var dfs func(int) (map[int]bool, int)
    dfs = func(node int) (map[int]bool, int) {
        geneSet := map[int]bool{nums[node]:true}
        for _, child := range children[node] {
            childGeneSet, y := dfs(child)
            res[node] = max(res[node], y)
            if len(childGeneSet) > len(geneSet) {
                geneSet, childGeneSet = childGeneSet, geneSet
            }
            for gene, _ := range childGeneSet {
                geneSet[gene] = true
            }
        }
        for geneSet[res[node]] {
            res[node]++
        }
        return geneSet, res[node]
    }

    dfs(0)
    return res
}
```

* [sol1-Python3]

```Python
class Solution:
    def smallestMissingValueSubtree(self, parents: List[int], nums: List[int]) -> List[int]:
        n = len(parents)
        children = [[] for _ in range(n)]
        for i in range(1, n):
            children[parents[i]].append(i)

        res = [1 for _ in range(n)]
        def dfs(node):
            geneSet = {nums[node]}
            for child in children[node]:
                childGeneSet, y = dfs(child)
                res[node] = max(res[node], y)
                if len(childGeneSet) > len(geneSet):
                    geneSet, childGeneSet = childGeneSet, geneSet
                geneSet.update(childGeneSet)
            while res[node] in geneSet:
                res[node] += 1
            return geneSet, res[node]
        
        dfs(0)
        return res
```

* [sol1-C]

```C
typedef struct {
    int key;
    UT_hash_handle hh;
} HashItem; 

HashItem *hashFindItem(HashItem **obj, int key) {
    HashItem *pEntry = NULL;
    HASH_FIND_INT(*obj, &key, pEntry);
    return pEntry;
}

bool hashAddItem(HashItem **obj, int key) {
    if (hashFindItem(obj, key)) {
        return false;
    }
    HashItem *pEntry = (HashItem *)malloc(sizeof(HashItem));
    pEntry->key = key;
    HASH_ADD_INT(*obj, key, pEntry);
    return true;
}

void hashFree(HashItem **obj) {
    HashItem *curr = NULL, *tmp = NULL;
    HASH_ITER(hh, *obj, curr, tmp) {
        HASH_DEL(*obj, curr);  
        free(curr);
    }
}

struct ListNode *createListNode(int val) {
    struct ListNode *obj = (struct ListNode *)malloc(sizeof(struct ListNode));
    obj->val = val;
    obj->next = NULL;
    return obj;
}

void freeLinkList(struct ListNode *list) {
    while (list) {
        struct ListNode *cur = list;
        list = list->next;
        free(cur);
    }
}

int dfs(int node, HashItem **geneSet, struct ListNode **children, int* nums, int *res) {
    hashAddItem(&geneSet[node], nums[node]);
    for (struct ListNode *cur = children[node]; cur; cur = cur->next) {
        int child = cur->val;
        res[node] = fmax(res[node], dfs(child, geneSet, children, nums, res));
        if (HASH_COUNT(geneSet[node]) < HASH_COUNT(geneSet[child])) {
            HashItem *tmp = geneSet[node];
            geneSet[node] = geneSet[child];
            geneSet[child] = tmp;
        }
        for (HashItem *pEntry = geneSet[child]; pEntry; pEntry = pEntry->hh.next) {
            hashAddItem(&geneSet[node], pEntry->key);
        }
    }
    while (hashFindItem(&geneSet[node], res[node])) {
        res[node]++;
    }
    return res[node];
}

int* smallestMissingValueSubtree(int* parents, int parentsSize, int* nums, int numsSize, int* returnSize) {
    int n = parentsSize;
    struct ListNode *children[n];
    memset(children, 0, sizeof(children));
    for (int i = 1; i < n; i++) {
        struct ListNode *node = createListNode(i);
        node->next = children[parents[i]];
        children[parents[i]] = node;
    }

    int *res = (int *)malloc(sizeof(int) * n);
    HashItem *geneSet[n];
    for (int i = 0; i < n; i++) {
        res[i] = 1;
        geneSet[i] = NULL;
    }
    dfs(0, geneSet, children, nums, res);
    *returnSize = n;
    for (int i = 0; i < n; i++) {
        hashFree(&geneSet[i]);
        freeLinkList(children[i]);
    }
    return res;
}
```

* [sol1-JavaScript]

```JavaScript
var smallestMissingValueSubtree = function(parents, nums) {
    const n = parents.length;
    const children = new Array(n).fill(0).map(() => new Array());
    for (let i = 1; i < n; i++) {
        children[parents[i]].push(i);
    }

    const res = new Array(n).fill(1);
    const geneSet = new Array(n).fill(0).map(() => new Set()); 
    var dfs = function(node) {
        geneSet[node].add(nums[node]);
        for (const child of children[node]) {
            res[node] = Math.max(res[node], dfs(child));
            if (geneSet[node].length < geneSet[child].length) {
                const tmp = geneSet[node];
                geneSet[node] = geneSet[child];
                geneSet[child] = tmp;
            }
            for (const x of geneSet[child]) {
                geneSet[node].add(x);
            }
        }
        while (geneSet[node].has(res[node])) {
            res[node]++;
        }
        return res[node];
    }
    dfs(0);
    return res;
};
```

**复杂度分析**

+ 时间复杂度：$O(n \log n)$，其中 $n$ 是树的节点数目。基于启发式合并的基因值集合合并需要 $O(n \log n)$。

+ 空间复杂度：$O(n \log n)$。

#### 方法二：深度优先搜索

根据题意，所有基因值互不相同，因此最多只有一个基因值为 $1$ 的节点。

首先，如果不存在基因值为 $1$ 的节点，那么 $1$ 就是以任一节点为根的子树缺失的最小基因值。如果存在基因值为 $1$ 的节点，那么可以把所有节点分成两种类型：

+ 以该节点为根的子树不包含基因值为 $1$ 的节点；

+ 以该节点为根的子树包含基因值为 $1$ 的节点。

对于第一种类型，类似地，$1$ 就是以任一节点为根的子树缺失的最小基因值。

对于第二种类型，这类节点是基因值为 $1$ 的节点的祖先节点（充分必要条件）。沿用方法一的符号规定，对于某一节点 $x$ 和任一它的祖先节点 $y$，都有 $\textit{geneSet}_{x} \subset \textit{geneSet}_{y}$。我们可以先找到基因值为 $1$ 的节点，然后可以通过 $\textit{parents}$ 数组依次遍历它的祖先节点（类似于遍历链表）。在遍历过程中，我们对节点 $\textit{node}$ 执行一次深度优先搜索（使用 $\textit{visited}$ 来记录已经访问过的节点，避免重复搜索），将访问过的节点的基因值加入到集合 $\textit{geneSet}$ 中，然后不断枚举基因值（类似于方法一，枚举值为上一次枚举的缺失的最小基因值），直到找到节点 $\textit{node}$ 为根的子树缺失的最小基因值。

> 因为依次遍历的节点为父子关系，所以可以通过 $\textit{visited}$ 来记录子节点已经搜索过的节点（这些节点的基因值已经加入到集合 $\textit{geneSet}$ 中），在父节点的搜索中可以跳过这些节点。

* [sol2-C++]

```C++
class Solution {
public:
    vector<int> smallestMissingValueSubtree(vector<int>& parents, vector<int>& nums) {
        int n = parents.size();
        vector<vector<int>> children(n);
        for (int i = 1; i < n; i++) {
            children[parents[i]].push_back(i);
        }

        unordered_set<int> geneSet;
        vector<int> visited(n, 0);
        function<void(int)> dfs = [&](int node) {
            if (visited[node]) {
                return;
            }
            visited[node] = 1;
            geneSet.insert(nums[node]);
            for (auto child : children[node]) {
                dfs(child);
            }
        };

        vector<int> res(n, 1);
        int iNode = 1, node = -1;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                node = i;
                break;
            }
        }
        while (node != -1) {
            dfs(node);
            while (geneSet.count(iNode)) {
                iNode++;
            }
            res[node] = iNode;
            node = parents[node];
        }
        return res;
    }
};
```

* [sol2-Java]

```Java
class Solution {
    public int[] smallestMissingValueSubtree(int[] parents, int[] nums) {
        int n = parents.length;
        List<Integer>[] children = new List[n];
        for (int i = 0; i < n; i++) {
            children[i] = new ArrayList<Integer>();
        }
        for (int i = 1; i < n; i++) {
            children[parents[i]].add(i);
        }

        Set<Integer> geneSet = new HashSet<Integer>();
        boolean[] visited = new boolean[n];

        int[] res = new int[n];
        Arrays.fill(res, 1);
        int iNode = 1, node = -1;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                node = i;
                break;
            }
        }
        while (node != -1) {
            dfs(node, nums, children, geneSet, visited);
            while (geneSet.contains(iNode)) {
                iNode++;
            }
            res[node] = iNode;
            node = parents[node];
        }
        return res;
    }

    public void dfs(int node, int[] nums, List<Integer>[] children, Set<Integer> geneSet, boolean[] visited) {
        if (visited[node]) {
            return;
        }
        visited[node] = true;
        geneSet.add(nums[node]);
        for (int child : children[node]) {
            dfs(child, nums, children, geneSet, visited);
        }
    }
}
```

* [sol2-C#]

```C#
public class Solution {
    public int[] SmallestMissingValueSubtree(int[] parents, int[] nums) {
        int n = parents.Length;
        IList<int>[] children = new IList<int>[n];
        for (int i = 0; i < n; i++) {
            children[i] = new List<int>();
        }
        for (int i = 1; i < n; i++) {
            children[parents[i]].Add(i);
        }

        ISet<int> geneSet = new HashSet<int>();
        bool[] visited = new bool[n];

        int[] res = new int[n];
        Array.Fill(res, 1);
        int iNode = 1, node = -1;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                node = i;
                break;
            }
        }
        while (node != -1) {
            DFS(node, nums, children, geneSet, visited);
            while (geneSet.Contains(iNode)) {
                iNode++;
            }
            res[node] = iNode;
            node = parents[node];
        }
        return res;
    }

    public void DFS(int node, int[] nums, IList<int>[] children, ISet<int> geneSet, bool[] visited) {
        if (visited[node]) {
            return;
        }
        visited[node] = true;
        geneSet.Add(nums[node]);
        foreach (int child in children[node]) {
            DFS(child, nums, children, geneSet, visited);
        }
    }
}
```

* [sol2-Go]

```Go
func smallestMissingValueSubtree(parents []int, nums []int) []int {
    n := len(parents)
    children := make([][]int, n)
    for i := 1; i < n; i++ {
        children[parents[i]] = append(children[parents[i]], i)
    }

    geneSet, visited := make(map[int]bool), make([]bool, n)
    var dfs func(int)
    dfs = func(node int) {
        if visited[node] {
            return
        }
        visited[node] = true
        geneSet[nums[node]] = true
        for _, child := range children[node] {
            dfs(child)
        }
    }

    res, node, iNode := make([]int, n), -1, 1
    for i := 0; i < n; i++ {
        res[i] = 1
        if nums[i] == 1 {
            node = i
        }
    }
    for node != -1 {
        dfs(node)
        for geneSet[iNode] {
            iNode++
        }
        res[node], node = iNode, parents[node]
    }
    return res
}
```

* [sol2-Python3]

```Python
class Solution:
    def smallestMissingValueSubtree(self, parents: List[int], nums: List[int]) -> List[int]:
        n = len(parents)
        children = [[] for _ in range(n)]
        for i in range(1, n):
            children[parents[i]].append(i)
 
        geneSet = set()
        visited = [False] * n
        def dfs(node):
            if visited[node]:
                return
            visited[node] = True
            geneSet.add(nums[node])
            for child in children[node]:
                dfs(child)

        node = nums.index(1) if 1 in nums else -1
        res, iNode = [1] * n, 1

        while node != -1:
            dfs(node)
            while iNode in geneSet:
                iNode += 1
            res[node], node = iNode, parents[node]
        return res
```

* [sol2-C]

```C
typedef struct {
    int key;
    UT_hash_handle hh;
} HashItem; 

HashItem *hashFindItem(HashItem **obj, int key) {
    HashItem *pEntry = NULL;
    HASH_FIND_INT(*obj, &key, pEntry);
    return pEntry;
}

bool hashAddItem(HashItem **obj, int key) {
    if (hashFindItem(obj, key)) {
        return false;
    }
    HashItem *pEntry = (HashItem *)malloc(sizeof(HashItem));
    pEntry->key = key;
    HASH_ADD_INT(*obj, key, pEntry);
    return true;
}

void hashFree(HashItem **obj) {
    HashItem *curr = NULL, *tmp = NULL;
    HASH_ITER(hh, *obj, curr, tmp) {
        HASH_DEL(*obj, curr);  
        free(curr);
    }
}

struct ListNode *createListNode(int val) {
    struct ListNode *obj = (struct ListNode *)malloc(sizeof(struct ListNode));
    obj->val = val;
    obj->next = NULL;
    return obj;
}

void freeLinkList(struct ListNode *list) {
    while (list) {
        struct ListNode *cur = list;
        list = list->next;
        free(cur);
    }
}

void dfs(int node, HashItem **geneSet, struct ListNode **children, int* nums, int *visited) {
    if (visited[node]) {
        return;
    }
    visited[node] = 1;
    hashAddItem(geneSet, nums[node]);
    for (struct ListNode *cur = children[node]; cur; cur = cur->next) {
        int child = cur->val;
        dfs(child, geneSet, children, nums, visited);
    }
}

int* smallestMissingValueSubtree(int* parents, int parentsSize, int* nums, int numsSize, int* returnSize) {
    int n = parentsSize;
    struct ListNode *children[n];
    memset(children, 0, sizeof(children));
    for (int i = 1; i < n; i++) {
        struct ListNode *node = createListNode(i);
        node->next = children[parents[i]];
        children[parents[i]] = node;
    }

    int *res = (int *)malloc(sizeof(int) * n);
    int *visited = (int *)malloc(sizeof(int) * n);
    HashItem *geneSet = NULL;
    memset(visited, 0, sizeof(int) * n);
    for (int i = 0; i < n; i++) {
        res[i] = 1;
    }
    int iNode = 1, node = -1;
    for (int i = 0; i < n; i++) {
        if (nums[i] == 1) {
            node = i;
            break;
        }
    }
    while (node != -1) {
        dfs(node, &geneSet, children, nums, visited);
        while (hashFindItem(&geneSet, iNode)) {
            iNode++;
        }
        res[node] = iNode;
        node = parents[node];
    }
    *returnSize = n;
    for (int i = 0; i < n; i++) {
        hashFree(&geneSet);
        freeLinkList(children[i]);
    }
    return res;
}
```

* [sol2-JavaScript]

```JavaScript
var smallestMissingValueSubtree = function(parents, nums) {
    const n = parents.length;
    const children = new Array(n).fill(0).map(() => new Array());
    for (let i = 1; i < n; i++) {
        children[parents[i]].push(i);
    }

    const geneSet = new Set();
    const visited = new Array(n).fill(0);
    const dfs = function(node) {
        if (visited[node]) {
            return;
        }
        visited[node] = 1;
        geneSet.add(nums[node]);
        for (const child of children[node]) {
            dfs(child);
        }
    };

    const res = new Array(n).fill(1);
    let iNode = 1, node = -1;
    for (let i = 0; i < n; i++) {
        if (nums[i] == 1) {
            node = i;
            break;
        }
    }
    while (node != -1) {
        dfs(node);
        while (geneSet.has(iNode)) {
            iNode++;
        }
        res[node] = iNode;
        node = parents[node];
    }
    return res;
};
```

**复杂度分析**

+ 时间复杂度：$O(n)$，其中 $n$ 是树的节点数目。

+ 空间复杂度：$O(n)$。

